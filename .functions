#!/bin/sh

# create and cd immediately
take() {
    if [ -z "$1" ]; then
    	# stop the process otherwise you'll end up in home directory
        return 0
    fi
    command mkdir -p "$1"
    cd "$1" || return 1
}

# history
h() {
    fc -l "$@" 1 2>&1   \
        | command sed '1!G;h;$!d' 2>&1  \
        | command less
        # use sed trick to reverse order of output, which is more portable than solutions with 'tail -r' or 'tac' (see http://stackoverflow.com/a/744093/3190077)
}

# grep through history without displaying duplicate results
# shellcheck disable=SC2016
hs() {
    fc -l 1 2>&1    \
    | command sed '1!G;h;$!d' 2>&1  \
    | command awk '{ $1=""; print}' \
    | command awk '!_[$0]++'    \
    | command sed 's/^ *//'  \
    | GREP_OPTIONS="" command grep -E "$1"
}

ocrmypdf_docker() {
  input="$1"
  if [ -z "$input" ] || ! [ -f "$input" ]; then
    echo "Usage: ocrmypdf_docker <input.pdf>"
    return 1
  fi

  directory=$(dirname "$input")
  basefilename=$(basename "$input" .pdf)
  absolute_directory=$(cd "$directory" && pwd)

  docker run --rm -v "$absolute_directory":/data jbarlow83/ocrmypdf-alpine --force-ocr "/data/$basefilename.pdf" "/data/$basefilename.pdf"
}

# used for custom prompt
# do not use the name '_git_branch' because with bash it might conflict with the '_git_branch' function of the 'git-completion.bash' file
_print_git_branch() {
    git_branch=$(command git symbolic-ref --short HEAD 2>/dev/null || (command git name-rev --name-only HEAD | cut -d"/" -f 2) 2>/dev/null)
    [ -n "$git_branch" ] && printf "(%s) \n" "$git_branch"
}

# utils functions (not meant to be used outside the profile)
_print_error() {
    printf "ERROR: %s\n" "$1" >&2
}
_test_file() {
    if ! [ -r "$1" ] || ! [ -f "$1" ]; then
        # _print_error "No such file $1"
        return 1
    fi
}
_parse_text_file() {
    _test_file "$1" || return 1
    # shellcheck disable=SC2016
    GREP_OPTIONS="" command grep -Ev "^\s*(#|$)" "$1" | command awk -F'#' '{print $1}'
}
_source_from_text_file() {
    # The simpler '_parse_text_file "$1" | while read -r script; do [...]; done' would have done the job for ksh and zsh.
    # For other shells though, such as bash without 'lastpipe' option enabled, this would not have worked as each command in a pipeline
    # creates its own separate subshell. This means that the functions coming from the scripts that we source at the end of the pipeline within
    # the while loop, such as virtualenwrapper functions, would not be exposed by such shells afterwards.
    while read -r script; do
        # solve file names with variable name at the beginning of path (e.g. '$NVM_DIR/nvm.sh')
        printf "%s" "$script"   \
            | GREP_OPTIONS="" command grep -Eq "^\\\$" && script=$(eval printf "$script")
        # shellcheck source=/dev/null
        _test_file "$script" && . "$script"
    done <<EOF 
    $(_parse_text_file "$1")
EOF
    unset script
}
